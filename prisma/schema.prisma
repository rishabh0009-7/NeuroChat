
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





// ===== USER MANAGEMENT =====
model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  email         String   @unique
  name          String?
  imageUrl      String?
  username      String?  @unique
  bio           String?
  isPremium     Boolean  @default(false)
  isActive      Boolean  @default(true)
  lastSeen      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  conversations    Conversation[]
  userSettings    UserSettings?
  apiKeys         ApiKey[]
  usageStats      UsageStats[]
  favorites       Favorite[]
  tags            Tag[]

  @@map("users")
  @@index([clerkId])
  @@index([email])
}

// ===== USER SETTINGS & PREFERENCES =====
model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  theme                 String   @default("system") // "light", "dark", "system"
  language              String   @default("en")
  defaultModel          String   @default("gpt-4o-mini")
  maxTokens             Int      @default(4000)
  temperature           Float    @default(0.7)
  enableStreaming       Boolean  @default(true)
  enableNotifications   Boolean  @default(true)
  enableAnalytics       Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ===== CONVERSATIONS =====
model Conversation {
  id          String   @id @default(cuid())
  title       String
  userId      String
  isArchived  Boolean  @default(false)
  isPinned    Boolean  @default(false)
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  tags      Tag[]
  favorites Favorite[]

  @@map("conversations")
  @@index([userId])
  @@index([createdAt])
  @@index([isArchived])
}

// ===== MESSAGES =====
model Message {
  id             String   @id @default(cuid())
  content        String
  role           String   // "user", "assistant", "system"
  model          String?  // "gpt-4o-mini", "gpt-4", "claude-3", etc.
  tokens         Int?
  cost           Float?
  conversationId String
  parentId       String?  // For threaded conversations
  isEdited       Boolean  @default(false)
  editedAt       DateTime?
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent      Message?     @relation("MessageThread", fields: [parentId], references: [id])
  replies     Message[]    @relation("MessageThread")
  tags       Tag[]

  @@map("messages")
  @@index([conversationId])
  @@index([createdAt])
  @@index([role])
}

// ===== TAGS & ORGANIZATION =====
model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3b82f6")
  userId    String?
  createdAt DateTime @default(now())

  // Relations
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  messages      Message[]

  @@map("tags")
  @@unique([name, userId])
  @@index([userId])
}

// ===== FAVORITES & BOOKMARKS =====
model Favorite {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  createdAt      DateTime @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("favorites")
  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

// ===== API KEYS & INTEGRATIONS =====
model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  userId      String
  isActive    Boolean  @default(true)
  permissions String[] // ["read", "write", "admin"]
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@index([userId])
  @@index([key])
}

// ===== USAGE STATISTICS & ANALYTICS =====
model UsageStats {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @db.Date
  model     String
  tokens    Int      @default(0)
  cost      Float    @default(0)
  requests  Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_stats")
  @@unique([userId, date, model])
  @@index([userId])
  @@index([date])
  @@index([model])
}

// ===== SYSTEM CONFIGURATION =====
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}


model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}